<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function zip_upload_menu() {
  $items = array();
  $items['node/%node/zip_upload'] = array(
    'title' => 'Zip upload',
    'description' => 'Lets you create nodes based on the contents of a zip file.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zip_upload_form', 1),
    'access callback' => 'zip_upload_access',
    'access arguments' => array(1, 'create material content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Decides whether to show the Zip Upload tab.
 */
function zip_upload_access(&$node, $permission) {
  if ($node->type == 'course' && user_access($permission)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Displays an upload form.
 */
function zip_upload_form(&$form_state, $node) {
  $form = array();
  $form['zip_upload'] = array(
    '#type' => 'file',
    '#title' => t('Zip upload'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  return $form;
}

/**
 * Submits the form and starts the processing.
 */
function zip_upload_form_submit($form, &$form_state) {
  $file = file_save_upload('zip_upload', array(), file_directory_path());
  if ($file != 0) {
    zip_upload_process($file, $form_state['values']['nid']);
  }
  else {
    form_set_error('zip_upload', t('Failed to save the file.'));
  }
}

/**
 * Process file upload and de-compressing.
 */
function zip_upload_process(&$file, $nid) {
  if ($file->filemime != 'application/zip') {
    drupal_set_message('Only ZIP files are supported.', 'error');
    return;
  }
  $zip = zip_open($file->filepath);
  $target = file_directory_path() . '/' . $nid;
  if(!file_check_directory($target, TRUE)) {
    drupal_set_message('Directory could not be created.', 'error');
  }
  while($zip_content = zip_read($zip)) {
    $zip_file = zip_entry_name($zip_content);
    $zip_name = basename ($zip_file);
    if (preg_match ('/__MACOSX/', $zip_file) || preg_match ('/^\.|~$/', $zip_name)) {
      //
      // skip macos special directories, dot or tilde files...
      //
    }
    else if (preg_match ('/\/$/', $zip_file)) {
    	//
    	// it's a directory path
    	//
    	@mkdir($target . '/' . $zip_file);
    } else {
      //
      // regular file, okay to unzip it...
      //
      $data = zip_entry_read($zip_content, zip_entry_filesize($zip_content));
      $target_path = $target . '/' . $zip_file;
      $resource = zip_upload_save_file($data, $target_path, $zip_file, $zip_content);
      zip_upload_create_material($resource, $nid);
      unset($resource);
    }
  }
  unlink ($file->filepath);
}

/**
 * Saves the file and returns a Drupal file object.
 */
function zip_upload_save_file($data, $target_path, $zip_file, $zip_content) {
  $filename = file_save_data($data, $target_path);
  //$filename = file_save_data($data, file_directory_temp());
  if ($filename) {
    global $user;
    $extensions = variable_get("upload_extensions_$rid", variable_get('upload_extensions_default', 'jpg jpeg gif png txt html doc xls pdf ppt pps odt ods odp'));
    $resource = new stdClass();
    $resource->filename = $zip_file;
    $resource->filepath = $filename;
    $resource->filemime = file_get_mimetype($resource->filename);
    $resource->source = $filename;
    $resource->destination = $resource->filepath;
    $resource->filesize = zip_entry_filesize($zip_content);
    // Rename potentially executable files, to help prevent exploits
    if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $resource->filename) && (substr($resource->filename, -4) != '.txt')) {
      $resource->filemime = 'text/plain';
      $resource->filepath .= '.txt';
      $resource->filename .= '.txt';
      // As the file may be named example.php.txt, we need to munge again to
      // convert to example.php_.txt, then create the correct destination.
      $resource->filename = file_munge_filename($resource->filename, $extensions);
      $resource->destination = $resource->filepath;
    }
    // If we made it this far it's safe to record this file in the database.
    $resource->uid = $user->uid;
    //$resource->status = 1;
    $resource->status = FILE_STATUS_TEMPORARY;
    $resource->timestamp = time();
    drupal_write_record('files', $resource);
    return $resource;
  }
  return FALSE;
}

/**
 * Creates a material node from a file.
 */
function zip_upload_create_material($file, $nid) {
  global $user;
  // Load parent course node
  $parent = node_load($nid);
  // Create a new node
  $form_state = array();
  module_load_include('inc', 'node', 'node.pages');
  $node = array('type' => 'material');
  $form_state['values']['title'] = $file->filename;
  $form_state['values']['body'] = '';
  $form_state['values']['name'] = $user->name;
  $form_state['values']['status'] = 0;
  $form_state['values']['op'] = t('Save');
  $form_state['values']['field_course_reference'][0]['nid']['nid'] = $parent->title . ' [nid:' . $parent->nid . ']';
  $form_state['values']['field_material_type'][0]['value'] = 'unknown';
  // Store images in the image field; all other files go into the file field
  if (in_array($file->filemime, array('image/png', 'image/jpeg', 'image/gif'))) {
    $form_state['values']['field_resource_type'][0]['value'] = 'image';
    $form_state['values']['field_image'][0]['fid'] = $file->fid;
    $form_state['values']['field_image'][0]['list'] = 1;
  }
  else {
    $form_state['values']['field_resource_type'][0]['value'] = 'file';
    $form_state['values']['field_file'][0]['fid'] = $file->fid;
    $form_state['values']['field_file'][0]['list'] = 1;
  }
  $form_state['values']['field_creators'][0]['value'] = $parent->field_creators[0]['value'];
  $form_state['values']['field_contributors'][0]['value'] = $parent->field_contributors[0]['value'];
  $form_state['values']['field_publisher'][0]['value'] = $parent->field_publisher[0]['value'];
  _drupal_execute('material_node_form', $form_state, (object) $node);
  // Reload node to save Creative Commons license.
  $node = node_load($form_state['nid']);
  $form_state['values']['creativecommons']['select_license_form']['cc_license_uri'] = $parent->cc->uri;
  $form_state['values']['creativecommons']['metadata']['attributionName'] = $parent->cc->metadata['attributionName'];
  $form_state['values']['creativecommons']['metadata']['attributionURL'] = $parent->cc->metadata['attributionURL'];
  $form_state['values']['creativecommons']['metadata']['type'] = $parent->cc->metadata['type'];
  $form_state['values']['creativecommons']['metadata']['source'] = $parent->cc->metadata['source'];
  $form_state['values']['creativecommons']['metadata']['description'] = $parent->cc->metadata['description'];
  $form_state['values']['creativecommons']['metadata']['creator'] = $parent->cc->metadata['creator'];
  $form_state['values']['creativecommons']['metadata']['rights'] = $parent->cc->metadata['rights'];
  $form_state['values']['creativecommons']['metadata']['date'] = $parent->cc->metadata['date'];
  $cc = new creativecommons_license($form_state['values']['creativecommons']['select_license_form']['cc_license_uri'], $form_state['values']['creativecommons']['metadata']);
  $cc->save($node->nid, 'update');
}

/**
* Alternate version of drupal_execute.
*
* We need to call an alternative version of drupal_validate_form()
* because the original uses static data that prevents the same form_id
* to be validated more than once per execution unit.
*
* For additional information, please see:
* http ://drupal.org/node/260934
*/
function _drupal_execute($form_id, &$form_state) {
  $args = func_get_args();
  $form = call_user_func_array('drupal_retrieve_form', $args);
  $form['#post'] = $form_state['values'];
  drupal_prepare_form($form_id, $form, $form_state);
  _drupal_process_form($form_id, $form, $form_state);
}

function _drupal_process_form($form_id, &$form, &$form_state) {
  $form_state['values'] = array();

  $form = form_builder($form_id, $form, $form_state);
  // Only process the form if it is programmed or the form_id coming
  // from the POST data is set and matches the current form_id.
  if ((!empty($form['#programmed'])) || (!empty($form['#post']) && (isset($form['#post']['form_id']) && ($form['#post']['form_id'] == $form_id)))) {
    _drupal_validate_form($form_id, $form, $form_state);

    // form_clean_id() maintains a cache of element IDs it has seen,
    // so it can prevent duplicates. We want to be sure we reset that
    // cache when a form is processed, so scenerios that result in
    // the form being built behind the scenes and again for the
    // browser don't increment all the element IDs needlessly.
    form_clean_id(NULL, TRUE);

    if ((!empty($form_state['submitted'])) && !form_get_errors() && empty($form_state['rebuild'])) {
      $form_state['redirect'] = NULL;
      form_execute_handlers('submit', $form, $form_state);

      // We'll clear out the cached copies of the form and its stored data
      // here, as we've finished with them. The in-memory copies are still
      // here, though.
      if (variable_get('cache', CACHE_DISABLED) == CACHE_DISABLED && !empty($form_state['values']['form_build_id'])) {
        cache_clear_all('form_'. $form_state['values']['form_build_id'], 'cache_form');
        cache_clear_all('storage_'. $form_state['values']['form_build_id'], 'cache_form');
      }

      // If batches were set in the submit handlers, we process them now,
      // possibly ending execution. We make sure we do not react to the batch
      // that is already being processed (if a batch operation performs a
      // drupal_execute).
      if ($batch =& batch_get() && !isset($batch['current_set'])) {
        // The batch uses its own copies of $form and $form_state for
        // late execution of submit handers and post-batch redirection.
        $batch['form'] = $form;
        $batch['form_state'] = $form_state;
        $batch['progressive'] = !$form['#programmed'];
        batch_process();
        // Execution continues only for programmatic forms.
        // For 'regular' forms, we get redirected to the batch processing
        // page. Form redirection will be handled in _batch_finished(),
        // after the batch is processed.
      }

      // If no submit handlers have populated the $form_state['storage']
      // bundle, and the $form_state['rebuild'] flag has not been set,
      // we're finished and should redirect to a new destination page
      // if one has been set (and a fresh, unpopulated copy of the form
      // if one hasn't). If the form was called by drupal_execute(),
      // however, we'll skip this and let the calling function examine
      // the resulting $form_state bundle itself.
      if (!$form['#programmed'] && empty($form_state['rebuild']) && empty($form_state['storage'])) {
        drupal_redirect_form($form, $form_state['redirect']);
      }
    }
  }
}

function _drupal_validate_form($form_id, $form, &$form_state) {
  // If the session token was set by drupal_prepare_form(), ensure that it
  // matches the current user's session.
  if (isset($form['#token'])) {
    if (!drupal_valid_token($form_state['values']['form_token'], $form['#token'])) {
      // Setting this error will cause the form to fail validation.
      form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.'));
    }
  }

  _form_validate($form, $form_state, $form_id);
}
