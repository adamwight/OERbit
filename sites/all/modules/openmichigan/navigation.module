<?php
// $Id$

/**
 * Implementation of hook_block().
 */
function navigation_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['navigation'] = array(
        'info' => t('Hierarchical Navigation'),
        'cache' => BLOCK_CACHE_PER_ROLE | BLOCK_CACHE_PER_PAGE,
      );
      return $blocks;
    case 'view':
      return array(
        'subject' => t('Hierarchical Navigation'),
        'content' => navigation_display(),
      );
  }
}

/**
 * Displays a rendered hierarchical menu.
 */
function navigation_display() {
  $node = node_load(arg(1));
  $node->title = db_fetch_object(db_query('SELECT r.title FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid WHERE n.nid = %d', $node->nid))->title;  
  $menu = '';
  $attributes = array('class' => '');
  switch ($node->type) {
    case 'course':
      $node = node_load($node->field_parent_unit[0]['nid']);
      $node->title = db_fetch_object(db_query('SELECT r.title FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid WHERE n.nid = %d', $node->nid))->title;
    case 'unit':
      $attributes['class'] = 'navigation-schools-colleges';
      $menu .= theme_item_list(array('data' => l(t('All Academic Units'), 'education/schools-colleges')), NULL, 'ul', $attributes);
      $parents = array();
      $siblings = array();
      navigation_get_parents($node, $parents, $node->nid);
      $parents = array_reverse($parents);
      $siblings = navigation_get_siblings($node);
      if (!empty($siblings[$node->nid])) {
        $siblings[$node->nid]['children'] = navigation_get_children($node);
      }
      if (!empty($parents)) {
        $attributes['class'] = 'navigation-academic-units';
        $menu .= theme_item_list($parents, NULL, 'ul', $attributes);
      }
      if (!empty($siblings)) {
        $attributes['class'] = 'navigation-current-unit';
        foreach ($siblings as $key => $values) {
          $item = node_load($key);
          if (!empty($item->field_unit_top[0]['nid'])) {
            $attributes['class'] = 'navigation-top-unit';
          }
        }
        $menu .= theme_item_list($siblings, NULL, 'ul', $attributes);
      }
      break;
    default:
      $path = drupal_get_path_alias($_GET['q']);
      $path = explode('/', $path);
      if ($path[0] == 'education' || (arg(0) == 'node' && arg(2) == 'edit')) {
        global $user;
        if (user_is_anonymous()) {
          $query = db_query('SELECT node.nid AS nid, node.title AS title FROM {node} node INNER JOIN {content_field_unit_top} top ON node.nid = top.nid WHERE field_unit_top_nid IS NOT NULL AND status=1 ORDER BY node.sticky ASC, node.title ASC');
        }
        else {
          $query = db_query('SELECT node.nid AS nid, node.title AS title FROM {node} node INNER JOIN {content_field_unit_top} top ON node.nid = top.nid WHERE field_unit_top_nid IS NOT NULL ORDER BY node.sticky ASC, node.title ASC');
        }
        $children = array();
        while ($top = db_fetch_array($query)) {
          $status = 'published';
          if (!node_load($top['nid'])->status) {
            $status = 'unpublished';
          }
          $children[$top['nid']] = l($top['title'], 'node/' . $top['nid'], array('attributes' => array('class' => $status)));
        }
        $menu .= theme_item_list($children, NULL, 'ul', array('class' => 'navigation-academic-sub-units'));
      }
      break;
  }
  return $menu;
}

/**
 * Gets a list of parents for the current node.
 */
function navigation_get_parents(&$node, &$parents, $nid) {
  if (!empty($node->field_unit_top[0]['nid'])) {
    if ($node->nid != $nid) {
      if (!$node->status) {
        $status = ' unpublished';
      }
      $parents[$node->nid] = l($node->title, 'node/' . $node->nid, array('attributes' => array('class' => 'navigation-top' . $status)));
    }
  }
  elseif (!empty($node->field_parent_unit[0]['nid'])) {
    $parent = node_load($node->field_parent_unit[0]['nid']);
    $parent->title = db_fetch_object(db_query('SELECT r.title FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid WHERE n.nid = %d', $parent->nid))->title;
    if ($node->nid != $nid) {
      if (!$node->status) {
        $status = ' unpublished';
      }
      $parents[$node->nid] = l($node->title, 'node/' . $node->nid, array('attributes' => array('class' => 'navigation-units' . $status)));
    }
    navigation_get_parents($parent, $parents, $nid);
  }
}

/**
 * Gets a list of siblings for the current academic unit.
 */
function navigation_get_siblings(&$node) {
  $siblings = array();
  if (!empty($node->field_parent_unit[0]['nid'])) {
    $parent = node_load($node->field_parent_unit[0]['nid']);
    //$parent->title = db_fetch_object(db_query('SELECT r.title FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid WHERE n.nid = %d', $parent->nid))->title;
    if (!empty($parent->field_unit_sub_unit[0]['items'])) {
      foreach ($parent->field_unit_sub_unit[0]['items'] as $sibling) {
        $status = '';
        if (!node_load($sibling['nid'])->status) {
          $status = ' unpublished';
        }
        $siblings[$sibling['nid']]['data'] = l($sibling['title'], 'node/' . $sibling['nid'], array('attributes' => array('class' => 'navigation-siblings' . $status)));
      }
    }
  }
  if (!empty($node->field_unit_top[0]['nid'])) {
    if (!$node->status) {
      $status = ' unpublished';
    }
    $siblings[$node->nid]['data'] = l($node->title, 'node/' . $node->nid, array('attributes' => array('class' => 'navigation-self' . $status)));
  }
  return $siblings;
}

/**
 * Gets a list of courses for the current academic unit.
 */
function navigation_get_children(&$node) {
  $children = array();
  $attributes = array('class' => 'navigation-courses');
  if (is_array($node->field_unit_courses[0]['items'])) {
    foreach ($node->field_unit_courses[0]['items'] as $item) {
      if ($item['nid'] == arg(1)) {
        $attributes['class'] = 'navigation-courses active';
      }
      else {
        $attributes['class'] = 'navigation-courses';
      }
      $item['title'] = db_fetch_object(db_query('SELECT r.title FROM {node} n INNER JOIN {node_revisions} r ON n.vid = r.vid WHERE n.nid = %d', $item['nid']))->title;
      if (!node_load($item['nid'])->status) {
        $attributes['class'] .= ' unpublished';
      }
      $children[$item['nid']] = l($item['title'], 'node/' . $item['nid'], array('attributes' => $attributes));
    }
    if (!empty($children)) {
      navigation_clean_children($children);
    }
  }
  $attributes['class'] = 'navigation-sub-units';
  if (is_array($node->field_unit_sub_unit[0]['items'])) {
    foreach ($node->field_unit_sub_unit[0]['items'] as $item) {
      if (!node_load($item['nid'])->status) {
        $attributes['class'] .= ' unpublished';
      }
      $children[$item['nid']] = l($item['title'], 'node/' . $item['nid'], array('attributes' => $attributes));
    }
  }
  return $children;
}

/**
 * Remove different versions of the same course.
 */
function navigation_clean_children(&$children) {
  foreach ($children as $nid => $course) {
    $node = node_load($nid);
    if ($node->type == 'course') {
      $query = db_query("SELECT DISTINCT(nid) AS nid FROM {content_type_course} WHERE field_course_code_value='%s' ORDER BY field_course_year_value DESC, field_course_term_value ASC", $node->field_course_code[0]['value']);
      $latest = db_fetch_object($query);
      $previous = db_fetch_object($query);
      if (!empty($previous) && $latest->nid != $node->nid) {
        unset($children[$node->nid]);
      }
    }
  }
}

/**
 * Implementation of hook_views_pre_render().
 */
function navigation_views_pre_render(&$view) {
  // Only alter the course navigation view
  if ($view->name != 'courses') {
    return;
  }
  if (!empty($view->result)) {
    foreach ($view->result as $key => $course) {
      if ($course->node_type == 'course') {
        $node = node_load($course->nid);
        $query = db_query("SELECT DISTINCT(nid) AS nid FROM {content_type_course} WHERE field_course_code_value='%s' ORDER BY field_course_year_value DESC, field_course_term_value ASC", $node->field_course_code[0]['value']);
        $latest = db_fetch_object($query);
        $previous = db_fetch_object($query);
        if (!empty($previous) && $latest->nid != $node->nid) {
          unset($view->result[$key]);
        }
      }
    }
  }
}
