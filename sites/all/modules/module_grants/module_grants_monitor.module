<?php
// $Id: module_grants_monitor.module,v 1.3 2010/01/13 00:35:36 rdeboer Exp $

/**
 * @file
 * Accessible content monitor. Creates an 'Accessible content' link in the
 * navigation menu to display a summary of all content accessible to the
 * logged-in user as determined by the enabled content access modules.
 */

define('I_CREATED', '1');
define('I_LAST_MODIFIED', '2');

/**
 * Implementation of hook_help().
 */
function module_grants_monitor_help($path, $arg) {
  switch ($path) {
    case 'accessible-content/i-created':
    case 'accessible-content/i-created/published':
    case 'accessible-content/i-created/not-published':
      $s = t('Showing all content <em>you created</em> and still have at least view access to, filtered by publication status.');
      break;
    case 'accessible-content/i-created/all':
      $s = t('Showing all content <em>you created</em> and still have at least view access to.');
      break;
    case 'accessible-content/i-last-modified':
    case 'accessible-content/i-last-modified/published':
    case 'accessible-content/i-last-modified/not-published':
      $s = t('Showing all content <em>you last modified</em> and still have at least view access to, filtered by publication status.');
      break;
    case 'accessible-content/i-last-modified/all':
      $s = t('Showing all content <em>you last modified</em> and still have at least view access to.');
      break;
    case 'accessible-content/i-can-edit':
    case 'accessible-content/i-can-edit/published':
    case 'accessible-content/i-can-edit/not-published':
      $s = t('Showing all content you can <em>edit</em>, filtered by publication status.');
      break;
    case 'accessible-content/i-can-edit/all':
      $s = t('Showing all content you can <em>edit</em>.');
      break;
    case 'accessible-content/i-can-view':
    case 'accessible-content/i-can-view/published':
    case 'accessible-content/i-can-view/not-published':
      $s = t('Showing all content you have at least <em>view</em> access to, filtered by publication status.');
      break;
    case 'accessible-content/i-can-view/all':
      $s = t('Showing all content you have at least <em>view</em> access to.');
      break;
  }
  return empty($s) ? '' : '<p>'. $s .'</p>';
}

/**
 * Implementation of hook_perm().
 *
 * The order of the permissions is relevant to the dynamic allocation of
 * suitable default tab selections.
 */
function module_grants_monitor_perm() {
  return array(
    // tab row 1:
    'access I Created tab', 'access I Last Modified tab', 'access I Can Edit tab', 'access I Can View tab',
    // tab row 2:
    'access Published tab', 'access Unpublished tab', 'access All tab');
}

/**
 * Implementation of hook_menu().
 *
 * Define new menu items and local tasks (tabs).
 * Existing menu items are modified through hook_menu_alter().
 */
function module_grants_monitor_menu() {
  $items = array();

  // Create an 'Acessible content' menu item in the navigation menu.
  // Add tabs: 'I created', 'I last modified', 'I can edit', 'I can view', each
  // with sub tabs 'Published', 'Unpublished', 'All'

  // There's an issue w.r.t assigning default tab selections for the
  // 'Accessible content' menu item. Core insists that each row of tabs has
  // exactly one tab defined with type=MENU_DEFAULT_LOCAL_TASK, the other tabs
  // having type=MENU_LOCAL_TASK.
  // The default we set needs to be part of the subset of tabs that the user
  // is permitted to see. The problem is that the user permissions are evaluated
  // when the menu and its tabs are about to be rendered (in menu.inc,
  // function theme_menu_local_tasks()), whereas the type must be defined
  // upfront when the menu structure is created, i.e. in the lines below.
  // The way we get around this problem is to first load the page with content
  // according to the user permissions, by calling this module's function
  // _show_accessible_content_summary(). Then we take advantage of the
  // Smart menus module, which overrides theme_menu_local_tasks(), to
  // highlight as 'current' the tabs matching the content shown.

  $items['accessible-content'] = array(
    'title' => 'Accessible content',
    'page callback' => '_show_accessible_content_summary',
    'page arguments' => array(), // tabs default based on user permissions
    'access callback' => 'user_any_access',
    'access arguments' => array(module_grants_monitor_perm()),
    'weight' => 2
  );

  // 'I created' and sub tabs
  $items['accessible-content/i-created'] = array(
    'title' => 'I created',
    'page callback' => '_show_accessible_content_summary',
    'page arguments' => array('access I Created tab'), // 2nd tab defaults
    'access callback' => 'user_access',
    'access arguments' => array('access I Created tab'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0
  );
  $items['accessible-content/i-created/published'] = array(
    'title' => 'Published',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '1', I_CREATED),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Created tab', 'access Published tab')),
    'type' => MENU_LOCAL_TASK,
  );
  $items['accessible-content/i-created/not-published'] = array(
    'title' => 'Unpublished',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '0', I_CREATED),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Created tab', 'access Unpublished tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['accessible-content/i-created/all'] = array(
    'title' => 'All',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '-1', I_CREATED),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Created tab', 'access All tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  // 'I last modified' and sub tabs
  $items['accessible-content/i-last-modified'] = array(
    'title' => 'I last modified',
    'page callback' => '_show_accessible_content_summary', // 2nd tab defaults
    'page arguments' => array('access I Last Modified tab'),
    'access callback' => 'user_access',
    'access arguments' => array('access I Last Modified tab'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );
  $items['accessible-content/i-last-modified/published'] = array(
    'title' => 'Published',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '1', I_LAST_MODIFIED),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Last Modified tab', 'access Published tab')),
    'type' => MENU_LOCAL_TASK,
  );
  $items['accessible-content/i-last-modified/not-published'] = array(
    'title' => 'Unpublished',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '0', I_LAST_MODIFIED),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Last Modified tab', 'access Unpublished tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['accessible-content/i-last-modified/all'] = array(
    'title' => 'All',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '-1', I_LAST_MODIFIED),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Last Modified tab', 'access All tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  // 'I can edit' and sub tabs
  $items['accessible-content/i-can-edit'] = array(
    'title' => 'I can edit',
    'page callback' => '_show_accessible_content_summary', // 2nd tab defaults
    'page arguments' => array('access I Can Edit tab'),
    'access callback' => 'user_access',
    'access arguments' => array('access I Can Edit tab'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );
  $items['accessible-content/i-can-edit/published'] = array(
    'title' => 'Published',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('update', '1'),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Can Edit tab', 'access Published tab')),
    'type' => MENU_LOCAL_TASK,
  );
  $items['accessible-content/i-can-edit/not-published'] = array(
    'title' => 'Unpublished',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('update', '0'),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Can Edit tab', 'access Unpublished tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['accessible-content/i-can-edit/all'] = array(
    'title' => 'All',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('update', '-1'),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Can Edit tab', 'access All tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  // 'I can view' and sub tabs
  $items['accessible-content/i-can-view'] = array(
    'title' => 'I can view',
    'page callback' => '_show_accessible_content_summary', // 2nd tab defaults
    'page arguments' => array('access I Can View tab'),
    'access callback' => 'user_access',
    'access arguments' => array('access I Can View tab'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15
  );
  $items['accessible-content/i-can-view/published'] = array(
    'title' => 'Published',
    'page callback' => 'show_accessible_content_summary',  // both tabs known
    'page arguments' => array('view', '1'),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Can View tab', 'access Published tab')),
    'type' => MENU_LOCAL_TASK,
  );
  $items['accessible-content/i-can-view/not-published'] = array(
    'title' => 'Unpublished',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '0'),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Can View tab', 'access Unpublished tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['accessible-content/i-can-view/all'] = array(
    'title' => 'All',
    'page callback' => 'show_accessible_content_summary', // both tabs known
    'page arguments' => array('view', '-1'),
    'access callback' => 'user_all_access',
    'access arguments' => array(array('access I Can View tab', 'access All tab')),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  return $items;
}

/**
 * Similar to show_accessible_content_summary (which it calls) but with a
 * different parameter list based on the (lack of) default tabs, as opposed to
 * content properties.
 *
 * @param $tab1
 * @param $tab2
 * @param $account
 * @return unknown_type
 */
function _show_accessible_content_summary($tab1 = NULL, $tab2 = NULL, $account = NULL) {
  // First 4 Module Grants permissions pertain to 1st row of tabs
  $permissions_tab_row1 = array_slice(module_grants_monitor_perm(), 0, 4);
  // 2nd row has Revisioning perm followed by remaining Module Grants perms
  $permissions_tab_row2 = module_exists('revisioning') ? array('access Pending tab') : array();
  $permissions_tab_row2 = array_merge($permissions_tab_row2, array_slice(module_grants_monitor_perm(), 4));

  if (!$tab1) {
    $tab1 = _find_first_permission($permissions_tab_row1);
  }
  elseif (!user_access($tab1, $account)) {
    unset($tab1);
  }
  if (!$tab2) {
    $tab2 = _find_first_permission($permissions_tab_row2);
  }
  elseif (!user_access($tab2, $account)) {
    unset($tab2);
  }
  if (!($tab1 && $tab2)) {
    drupal_set_message(t('For you to see the list of Accessible content your administrator must give you permissions to one or more tabs of each of the two tab rows.'), 'warning');
    return '';
  }
  $access = 'view';
  $user_filter = NO_FILTER;
  $published = NO_FILTER;
  $is_moderated = NO_FILTER;
  $is_pending = FALSE;
  switch ($tab1) {
    case 'access I Created tab':
      $user_filter = I_CREATED;
      break;
    case 'access I Last Modified tab':
      $user_filter = I_LAST_MODIFIED;
      break;
    case 'access I Can Edit tab':
      $access = 'update';
      break;
  }
  switch ($tab2) {
    case 'access Published tab':
      $published = TRUE;
      break;
    case 'access Unpublished tab':
      $published = FALSE;
      break;
    case 'access Pending tab':
      $is_moderated = user_access('administer nodes') ? NO_FILTER : TRUE;
      $is_pending = TRUE;
      break;
  }
  return show_accessible_content_summary($access, $published, $user_filter, $is_moderated, $is_pending);
}

/**
 * Return as a themed table a content summary of the site filtered by the
 * access rights of the logged-in user.
 *
 * @param $access
 *   one of 'view', 'update' or 'delete'
 * @param $is_published
 *   1 for published-only, 0 for unpublished-only, NO_FILTER for don't care
 * @param $user_filter
 *   One of NO_FILTER, I_CREATED or I_LAST_MODIFIED
 * @param $is_moderated
 *   1 for moderated, 0 for not moderated, NO_FILTER for don't care
 * @param $is_pending
 *   TRUE for in draft/pending, FALSE otherwise
 * @return
 *   themed HTML
 */
function show_accessible_content_summary($access = 'view', $is_published = -1,
    $user_filter = NO_FILTER, $is_moderated = NO_FILTER, $is_pending = FALSE) {
  global $user;
  $creator_id  = ($user_filter == I_CREATED) ? $user->uid : -1;
  $modifier_id = ($user_filter == I_LAST_MODIFIED) ? $user->uid : -1;
  $nodes = get_nodes($access, (int)$is_published, $creator_id, $modifier_id, (int)$is_moderated, $is_pending);
  return theme('nodes_summary', $nodes);
}


/**
 * Implementation of hook_theme().
 *
 * Register the theme_hooks() available in this module, with their arguments
 * and default values.
 */
function module_grants_monitor_theme() {
  return array(
    'nodes_summary' => array(
       'arguments' => array('nodes' => NULL) // theme_nodes_summary($nodes)
    )
  );
}

/**
 * Theme the passed-in nodes as a table.
 *
 * Uses the following subthemes:
 * o 'table_nodes', falling back to theme.inc/theme_table() if not defined
 * o 'username', i.e. theme.inc/theme_username()
 *
 * @param $nodes
 *   Array of nodes to display.
 * @return
 *   Themed table HTML or a paragraph saying 'No content found.' if the supplied
 *   array is empty.
 *
 * @ingroup themeable
 */
function theme_nodes_summary($nodes) {
  $css_path = drupal_get_path('module', 'module_grants') .'/module_grants_monitor.css';
  drupal_add_css($css_path, 'module', 'all', FALSE);
  if (!empty($nodes)) {
    // Note the specification of fields doesn't seem to work properly
    // See theme.inc/theme_table(), which uses tablesort.inc/tablesort_header()
    $header = array(
      array('data' => t('Title'), 'field' => 'r.title'),
      array('data' => t('Type'), 'field' => 'n.type'),
      array('data' => t('Creator'), 'field' => 'n.uid'),
      array('data' => t('Last updated'), 'field' => 'timestamp', 'sort' => 'desc'),
      array('data' => t('By'), 'field' => 'r.uid'),
      array('data' => t('Published?'), 'field' => 'status')
    );
    $show_taxonomy_terms = module_exists('taxonomy') &&
      (count(taxonomy_get_vocabularies()) > 0) && variable_get("show_taxonomy_terms", TRUE);
    $show_workflow_state = module_exists('workflow');
    if ($show_taxonomy_terms) {
      $header[] = array('data' => t('Term'), 'field' => 'term');
    }
    if ($show_workflow_state) {
      $header[] = array('data' => t('Workflow state'), 'field' => 'ws.state');
    }
    $rows = array();
    foreach ($nodes as $node) {
      $nid = $node->nid;
      // Hmm... maybe we should always go to node/$nid and rely on Smart tabs to pick the tab
      $page_tab = (user_may_view_revisions($node) && get_number_of_revisions($nid) > 1) ? '/revisions' : '';
      $row = array(
        l($node->title, 'node/'. $nid . $page_tab),
        check_plain(node_get_types('name', $node)),
        theme('username', user_load(array('uid' => $node->creator_uid))),
        format_date($node->timestamp),
        theme('username', user_load(array('uid' => $node->uid))),
        $node->status ? t('Yes') : t('No')
      );
      if ($show_taxonomy_terms) {
        $row[] = empty($node->term) ? '' : check_plain($node->term);
      }
      if ($show_workflow_state) {
        $row[] = empty($node->state) ? t('No state') : check_plain($node->state);
      }
      $rows[] = $row;
    }
    $attributes = array('class' => 'table-nodes');
    return theme(array('table_nodes', 'table'), $header, $rows, $attributes, $caption = NULL);
  }
  return '<p>'. t('No content found.') .'</p>';
}

/**
 * Implement (in your own module) the function below if you want to override
 * the default way in which the nodes summary table is displayed.
 * If you do, don't forget to register this theme_hook() via <your_module>_theme()
 * in a manner similar to module_grants_theme() in this file.
 *
 * @param $header
 * @param $rows
 * @return themed HTML, see for instance /includes/theme.inc/theme_table()
 *
 * @ingroup themeable
 *
function theme_table_nodes($header, $rows) {
}
 */