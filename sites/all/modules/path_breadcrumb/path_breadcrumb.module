<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function path_breadcrumb_menu() {
  $items = array();
  $items['admin/settings/path_breadcrumb'] = array(
    'title' => 'Path Breadcrumb',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_breadcrumb_admin_settings'),
    'access arguments' => array('administer path breadcrumb'),
    'file' => 'path_breadcrumb.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function path_breadcrumb_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Only set breadcrumbs when loading a full node page.
  if (!$a4 && $node->nid == arg(1)) {
    drupal_set_breadcrumb(array());
    return;
  }
  if (drupal_is_front_page()) {
    drupal_set_breadcrumb(array());
    return;
  }
  // Check whether the current node type has path breadcrumb enabled
  $types = array_values(variable_get('path_breadcrumb_types', array()));
  $key = array_search($node->type, $types);
  if (!$types[$key]) {
    return;
  }
  switch ($op) {
    case 'view':
      $path = drupal_get_path_alias($_GET['q']);
      $path = explode('/', $path);
      $breadcrumb = array();
      $count = count($path);
      $path_count = $count;
      $unique = array();
      do {
        if (!empty($path)) {
          if ($count != $path_count || variable_get('path_breadcrumb_current', 0) != 0) {
            $normal = drupal_get_normal_path(implode('/', $path));
            $morsel = menu_get_object('node', 1, $normal);
            if (!empty($morsel) && $morsel->path != $normal) {
              if ($count == 1 && variable_get('path_breadcrumb_first', '') != '') {
                //$breadcrumb[] = l(variable_get('path_breadcrumb_first', ''), $morsel->path);
                if ($path[0] == 'education') {
                  $breadcrumb[] = l(variable_get('path_breadcrumb_first', ''), $morsel->path);
                }
                else {
                  $breadcrumb[] = l($path[0], $morsel->path);
                }
              }
              else {
                // Account for different versions of the course
                $term = NULL;
                if ($morsel->type == 'course') {
                  $query = db_query("SELECT DISTINCT(c.nid) AS nid, n.title AS title FROM {node} n INNER JOIN {content_type_course} c ON n.nid = c.nid WHERE c.field_course_code_value='%s' ORDER BY c.field_course_year_value DESC, c.field_course_term_value ASC", $morsel->field_course_code[0]['value']);
                  $latest = db_fetch_object($query);
                  $previous = db_fetch_object($query);
                  if (!empty($previous) && $latest->nid != $node->nid) {
                    $term = $node->field_course_term[0]['value'] . ' ' . substr($node->field_course_year[0]['value'], 0, 4);
                  }
                }
                if ($count == $path_count && variable_get('path_breadcrumb_current_link', 0) == 0) {
                  if (!empty($term)) {
                    $breadcrumb[] = $term;
                  }
                  else {
                    $breadcrumb[] = $morsel->title;
                  }
                }
                else {
                  if (!empty($term)) {
                    if ($node->nid == $morsel->nid) {
                      $breadcrumb[] = l($term, $morsel->path);
                    }
                    else {
                      $breadcrumb[] = l($previous->title, $morsel->path);
                    }
                  }
                  else {
                    $breadcrumb[] = l($morsel->title, $morsel->path);
                  }
                }
                unset($term);
              }
              $unique[] = $morsel->title;
            }
          }
        }
        $count--;
      } while (array_pop($path));
      if (variable_get('path_breadcrumb_home', 0) != 0) {
        $breadcrumb[] = l(variable_get('path_breadcrumb_home_text', t('Home')), '<front>');
      }
      $breadcrumb = array_unique($breadcrumb);
      $breadcrumb = array_reverse($breadcrumb);
      drupal_set_breadcrumb($breadcrumb);
      break;
  }
}
